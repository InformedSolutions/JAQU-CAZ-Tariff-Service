  #################################################### Nightly Steps ############################################################
kind: pipeline
type: docker
name: tariffs-api-nightly
trigger:
  event:
    - cron
concurrency:
  limit: 1
volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

steps:

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t maven-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  - name: owasp dependency scan
    image: maven-base
    pull: never
    commands:
      - mvn org.owasp:dependency-check-maven:check -P security
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password


  ################################################# End Nightly Steps ############################################################

---









  ################################################### DEV Steps ########################################################

kind: pipeline
type: docker
name: tariffs-api-dev

trigger:
  branch:
    - develop
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz-tariff
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t maven-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # IT test
  - name: IT test
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress
    when:
      event:
        - push

  # Scan with sonar
  - name: sonar scan
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    environment:
      sonar_host:
        from_secret: sonar_host
      sonar_token:
        from_secret: sonar_token
    pull: never
    commands:
      - mvn sonar:sonar -Dsonar.host.url=$sonar_host
        -Dsonar.projectKey=${DRONE_REPO}
        -Dsonar.projectName=${DRONE_REPO}
        -Dsonar.login=$sonar_token
        -Dsonar.coverage.jacoco.xmlReportPaths=/drone/src/target/site/jacoco-aggregate/jacoco.xml
        -Dsonar.tests=src/test/java,src/it/java --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # Invoke terraform apply
  - name: deploy to dev
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select dev || tf workspace new dev
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip jq
      - pip install awscli
      - > 
        aws lambda invoke --invocation-type RequestResponse --function-name tariffs-lambda-dev --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"03736edafacd11e98f0b362b9e155667\"]}}" output.json
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api dev
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - bash deploy_jaqu_caz.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: dev
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  ################################################ End Dev Steps ############################################################

---














  ################################################ SIT Steps ############################################################

kind: pipeline
type: docker
name: tariffs-api-sit

trigger:
  branch:
    - release/*
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: docker_sock
    host:
      path: /var/run/docker.sock

  - name: package_directory
    temp: {}

  - name: m2_repo
    temp: {}

services:
  - name: postgres
    image: postgres:11-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: caz-tariff
    ports:
      - 5432
  - name: localstack
    image: localstack/localstack
    environment:
      SERVICES: s3
    ports:
      - 4572

steps:

  # Clean agent images and containers to prevent disk space overuse
  - name: clean agent
    image: docker
    commands:
      - docker system prune -f
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Build Docker Image for Running Maven
  - name: build docker maven base
    image: docker
    commands:
      - docker build -t maven-base -f ci-cd-resources/Dockerfile.ci.base .
    volumes:
      - name: docker_sock
        path: /var/run/docker.sock

  # Unit test
  - name: unit test
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    commands:
      - mvn test -P jacoco --no-transfer-progress
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password

  # IT test
  - name: IT test
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      JAQU_NEXUS_URL:
        from_secret: nexus_url
      JAQU_NEXUS_USER:
        from_secret: nexus_username
      JAQU_NEXUS_PASSWORD:
        from_secret: nexus_password
      BUILD_ID: ${DRONE_BUILD_NUMBER}
      POSTGRES_URL: postgres:5432
      AWS_S3_URL: localstack:4572
    commands:
      - mvn verify -DskipUnitTests -P jacoco --no-transfer-progress

  # Package
  - name: package deployable zip
    image: maven-base
    volumes:
      - name: package_directory
        path: /drone/src/target
      - name: m2_repo
        path: /root/.m2
    pull: never
    environment:
      BUILD_ID: ${DRONE_BUILD_NUMBER}
    commands:
      - mvn package -DskipUnitTests --no-transfer-progress
    when:
      event:
        - push

  # Invoke terraform apply
  - name: plan updates in sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure

  - name: deploy to sit
    image: hashicorp/terraform:0.12.3
    commands:
      - apk update && apk add bash
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout sit
      - export TF_VAR_lambda_file=$(ls /opt/package/*.zip | tail -1)
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select sit || tf workspace new sit
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
    volumes:
      - name: package_directory
        path: /opt/package
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip jq
      - pip install awscli
      - > 
        aws lambda invoke --invocation-type RequestResponse --function-name tariffs-lambda-sit --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"03736edafacd11e98f0b362b9e155667\"]}}" output.json
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api sit
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - bash deploy_jaqu_caz.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: sit
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push


  ################################################ End SIT  Only Steps ############################################################
---











  ################################################ Preprod Steps ############################################################

kind: pipeline
type: docker
name: tariffs-api-preprod

trigger:
  branch:
    - staging
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  # Invoke terraform scripts to deploy lambda function in Pre-prod
  - name: plan terraform updates in preprod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=tariffs-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout preprod
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure
        
  # Invoke terraform scripts to deploy lambda function in Pre-prod
  - name: deploy to pre-prod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=tariffs-lambda-sit
      - ENV=sit
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout preprod
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select preprod || tf workspace new preprod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  # Invokes lambda function with $LATEST alias to deploy schema migrations prior to code deploy rollover
  - name: apply db schema migrations
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip jq
      - pip install awscli
      - > 
        aws lambda invoke --invocation-type RequestResponse --function-name tariffs-lambda-preprod --payload "{\"requestContext\": {\"identity\": {}},\"httpMethod\": \"POST\",\"path\": \"/v1/migrate-db\", \"multiValueHeaders\":{\"x-correlation-id\":[\"03736edafacd11e98f0b362b9e155667\"]}}" output.json
      - status_code=$(cat output.json | jq '.statusCode')
      - if [ $status_code == "200" ]; then exit 0; else exit 1; fi
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api preprod
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - bash deploy_jaqu_caz.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: preprod
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api preprod
  - name: subscribe to operational monitoring alert in api preprod
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: preprod
    when:
      event:
        - push


  ################################################ End Preprod Only Steps ############################################################
---
















  ################################################ Production Steps ############################################################

kind: pipeline
type: docker
name: tariffs-api-prod

trigger:
  branch:
    - master
  event:
    - pull_request
    - push
concurrency:
  limit: 1

volumes:
  - name: package_directory
    temp: {}

steps:

  # Invoke terraform scripts to deploy lambda function in prod
  - name: plan terraform updates in prod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=tariffs-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout master
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf plan
      - cd ../01.networking
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf plan
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - pull_request

  - name: provisioning warning
    image: docker:git
    commands:
      - echo "Pipeline failed. If a deployment is being made for the first time into an environment terraform backends will not yet exist which means this is to be expected. If not terraform related, please see logs for further details"
    when:
      status:
        - failure
         
  # Invoke terraform scripts to deploy lambda function in prod
  - name: deploy to prod
    image: hashicorp/terraform:0.12.3
    volumes:
      - name: package_directory
        path: /opt/package
    commands:
      - apk add --update bash python python-dev py-pip build-base jq wget
      - pip install awscli
      - mkdir ~/.ssh
      - echo -n "$GIT_PRIVATE_SSH" > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - touch ~/.ssh/known_hosts
      - chmod 600 ~/.ssh/known_hosts
      - ssh-keyscan -H github.com > /etc/ssh/ssh_known_hosts 2> /dev/null
      - LAMBDA_FUNCTION=tariffs-lambda-preprod
      - ENV=preprod
      - SIGNED_URL=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Code.Location'`
      - VERSION=`aws lambda get-function --function-name $LAMBDA_FUNCTION --qualifier $ENV| jq --raw-output '.Configuration.Version'`
      - wget -O /opt/package/$LAMBDA_FUNCTION-$VERSION.zip $SIGNED_URL
      - export TF_VAR_lambda_file=/opt/package/$LAMBDA_FUNCTION-$VERSION.zip
      - git clone git@github.com:InformedSolutions/JAQU-CAZ-IAC.git
      - cd JAQU-CAZ-IAC
      - git checkout master
      - cd terraform/projects/tariffs/layers/00.global
      - PATH=$PATH:../../../../bin/
      - chmod +x ../../../../bin/tf
      - tf init
      - tf workspace select default
      - tf apply -auto-approve
      - cd ../01.networking
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../02.backends
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
      - cd ../03.api
      - tf init
      - tf workspace select prod || tf workspace new prod
      - tf apply -auto-approve
    environment:
      TF_VAR_access_key:
        from_secret: aws_access_key_id
      TF_VAR_secret_key:
        from_secret: aws_secret_access_key
      TF_VAR_account_id:
        from_secret: aws_account_id
      GIT_PRIVATE_SSH:
        from_secret: github_private_key
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
    when:
      event:
        - push

  - name: codedeploy api prod
    image: golang:alpine
    commands:
      - apk add --update bash python python-dev py-pip build-base jq
      - pip install awscli
      - aws s3 cp s3://$LAMBDA_BUCKET/$PROJECT/$DEPLOY_ENVIRONMENT/CodeDeploy/deploy_jaqu_caz.sh .
      - bash deploy_jaqu_caz.sh
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: prod
      LAMBDA_BUCKET: jaqu-projects-lambda-bucket
    when:
      event:
        - push

  # subscribe to operational monitoring alert in api preprod
  - name: subscribe to operational monitoring alert in api prod
    image: alpine:latest
    commands:
      - apk add --update bash python python-dev py-pip build-base
      - pip install awscli
      - python ./ci-cd-resources/subscribe_to_alert_topics.py --include $PROJECT,$DEPLOY_ENVIRONMENT --exclude dead,letter
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_DEFAULT_REGION: eu-west-2
      PROJECT: tariffs
      DEPLOY_ENVIRONMENT: prod
    when:
      event:
        - push


  ################################################ End Production Only Steps ############################################################



















  #################################################### Secrets #####################################################################


# Note the below values are pulled from AWS Secrets Manager via the aws-secrets Drone plugin
---
kind: secret
name: aws_access_key_id
get:
  path: /secret/drone.global
  name: awsAccessKeyId

---
kind: secret
name: aws_secret_access_key
get:
  path: /secret/drone.global
  name: awsSecretAccessKey

---
kind: secret
name: sonar_host
get:
  path: /secret/drone.global
  name: sonarHost

---
kind: secret
name: sonar_token
get:
  path: /secret/drone.global
  name: sonarToken

---
kind: secret
name: github_private_key
get:
  path: /secret/drone.global
  name: githubPrivateKey

---
kind: secret
name: nexus_url
get:
  path: /secret/drone.global
  name: nexusUrl

---
kind: secret
name: nexus_username
get:
  path: /secret/drone.global
  name: nexusUsername

---
kind: secret
name: nexus_password
get:
  path: /secret/drone.global
  name: nexusPassword

---
kind: secret
name: db_password
get:
  path: /secret/tariffs.dev/db-password

  ################################################ End Secrets #########################################################